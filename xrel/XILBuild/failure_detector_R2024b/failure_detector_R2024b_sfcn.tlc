%% file : failure_detector_R2024b_sfcn.tlc
%% 
%% Description:
%%   Simulink Coder TLC Code Generation file for failure_detector_R2024b_sfcn
%% 
%% Simulink version      : 24.2 (R2024b) 21-Jun-2024
%% TLC file generated on : 10-Mar-2025 18:58:47

/%
     %%%-MATLAB_Construction_Commands_Start
     def = legacy_code('initialize');
     def.SFunctionName = 'failure_detector_R2024b_sfcn';
     def.OutputFcnSpec = 'failure_detector_step(void)';
     def.StartFcnSpec = 'failure_detector_initialize(void)';
     def.TerminateFcnSpec = 'failure_detector_terminate(void)';
     def.GlobalVarSpec = {'double u1 : failure_detector_U.sensor1_reading', 'double u2 : failure_detector_U.sensor2_reading', 'boolean y1 : failure_detector_Y.sensor1_failure', 'boolean y2 : failure_detector_Y.sensor2_failure', 'boolean y3 : failure_detector_Y.coherency_failure'};
     def.HeaderFiles = {'failure_detector.h'};
     def.SourceFiles = {'failure_detector.c'};
     def.IncPaths = {'D:\MBD_challenge', 'D:\MBD_challenge\failure_detector_ert_rtw'};
     def.SrcPaths = {'D:\MBD_challenge', 'D:\MBD_challenge\failure_detector_ert_rtw'};
     def.SampleTime = 0.2;
     def.Options.outputsConditionallyWritten = true;
     legacy_code('sfcn_tlc_generate', def);
     %%%-MATLAB_Construction_Commands_End
%/

%implements failure_detector_R2024b_sfcn "C"

%assign lLCTLocation=FEVAL("which", "legacy_code")
%assign lLCTFolder=FEVAL("fileparts", lLCTLocation)
%assign lctTlcLibPath=FULLFILE(lLCTFolder, "+legacycode", "+lct", "+gen", "+tlclib")
%addincludepath "%<lctTlcLibPath>"
%include "xrelimportlib.tlc"

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup (block, system) void

    %% The Target Language must be C
    %if ::GenCPP==1 && !IsModelReferenceSimTarget()
        %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
    %endif

    %if IsModelReferenceSimTarget()
        %% This TLC file does not inline the call to the legacy code for the model reference SIM target.
        %% It can be used to generate stub behavior in a SIM target build used to support diagram update in model block SIL/PIL.
        %<LibSetRTModelErrorStatus("\"This function (BlockTypeSetup) should never be called.\"")>
        return;
        %return
    %endif
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign hFileName = FcnGenerateUniqueFileName("failure_detector_R2024b_sfcn_wrapper", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        %<LibEmitPlatformTypeIncludes()>
        #endif
        
        

        
        #endif
        
        %closefile hFile
        
        %assign cFileName = FcnGenerateUniqueFileName("failure_detector_R2024b_sfcn_wrapper", "source")
        %openfile cFile = "%<cFileName>.c"
        %selectfile cFile
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        %<LibEmitPlatformTypeIncludes()>
        #endif

        #include "failure_detector.h"

        

        %closefile cFile

        %<LibAddToCommonIncludes("%<hFileName>.h")>
        %<LibAddToModelSources("%<cFileName>")>
    %else
        %<LibAddToCommonIncludes("failure_detector.h")>
    %endif
    %<SLibAddToStaticSources("failure_detector.c")>
%endfunction

%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup (block, system) void
    %if IsModelReferenceSimTarget()
        %% This TLC file does not inline the call to the legacy code for the model reference SIM target.
        %% It can be used to generate stub behavior in a SIM target build used to support diagram update in model block SIL/PIL.
        %<LibSetRTModelErrorStatus("\"This function (BlockTypeSetup) should never be called.\"")>
        return;
        %return
    %endif
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign sfunInstanceName = FEVAL("matlab.lang.makeValidName", LibBlockIdentifier(block))
        %assign hFileName = FcnGenerateUniqueFileName("failure_detector_R2024b_sfcn_wrapper_%<sfunInstanceName>", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        %<LibEmitPlatformTypeIncludes()>
        #endif
        
        extern void failure_detector_R2024b_sfcn_wrapper_Start_%<sfunInstanceName>(void);
        extern void failure_detector_R2024b_sfcn_wrapper_Output_%<sfunInstanceName>(void);
        extern void failure_detector_R2024b_sfcn_wrapper_Terminate_%<sfunInstanceName>(void);
        
        #endif
        
        %closefile hFile
        
        %assign sfunInstanceName = FEVAL("matlab.lang.makeValidName", LibBlockIdentifier(block))
        %assign cFileName = FcnGenerateUniqueFileName("failure_detector_R2024b_sfcn_wrapper_%<sfunInstanceName>", "source")
        %openfile cFile = "%<cFileName>.c"
        %selectfile cFile
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        %<LibEmitPlatformTypeIncludes()>
        #endif

        #include "failure_detector.h"

        void failure_detector_R2024b_sfcn_wrapper_Start_%<sfunInstanceName>(void) {
            failure_detector_initialize();
        }

        void failure_detector_R2024b_sfcn_wrapper_Output_%<sfunInstanceName>(void) {
            failure_detector_step();
        }

        void failure_detector_R2024b_sfcn_wrapper_Terminate_%<sfunInstanceName>(void) {
            failure_detector_terminate();
        }

        %closefile cFile

        %<LibAddToCommonIncludes("%<hFileName>.h")>
        %<LibAddToModelSources("%<cFileName>")>
    %else
        %<LibBlockSetIsExpressionCompliant(block)>
    %endif
%endfunction

%% Function: Start ========================================================
%function Start (block, system) Output
    %if IsModelReferenceSimTarget()
        %% This TLC file does not inline the call to the legacy code for the model reference SIM target.
        %% It can be used to generate stub behavior in a SIM target build used to support diagram update in model block SIL/PIL.
        %return
    %endif
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        {
            %assign sfunInstanceName = FEVAL("matlab.lang.makeValidName", LibBlockIdentifier(block))
            failure_detector_R2024b_sfcn_wrapper_Start_%<sfunInstanceName>();
        
        }
    %else
        %% 
        failure_detector_initialize();
        %% Write global IO variables to block outputs
        %openfile OutputIOBuffer_failure_detector_R2024b_sfcn
        %<XrelAssignOutputVariableSignal(block, 0, "failure_detector_Y.sensor1_failure")>
        %<XrelAssignOutputVariableSignal(block, 1, "failure_detector_Y.sensor2_failure")>
        %<XrelAssignOutputVariableSignal(block, 2, "failure_detector_Y.coherency_failure")>
        %closefile OutputIOBuffer_failure_detector_R2024b_sfcn
        %<OutputIOBuffer_failure_detector_R2024b_sfcn>
    %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs (block, system) Output
    %if IsModelReferenceSimTarget()
        %% This TLC file does not inline the call to the legacy code for the model reference SIM target.
        %% It can be used to generate stub behavior in a SIM target build used to support diagram update in model block SIL/PIL.
        %<LibSetRTModelErrorStatus("\"This function (Outputs) should never be called.\"")>
        return;
        %return
    %endif
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        {
            %assign sfunInstanceName = FEVAL("matlab.lang.makeValidName", LibBlockIdentifier(block))
            failure_detector_R2024b_sfcn_wrapper_Output_%<sfunInstanceName>();
        
        }
    %else
        %assign currentSrcFile = LibGetModelDotCFile()
        %openfile DeclareBuffer
        %<XrelValidateExportedGlobalVariable(block, "Input", 0, "failure_detector_U.sensor1_reading")>
        %<XrelValidateExportedGlobalVariable(block, "Input", 1, "failure_detector_U.sensor2_reading")>
        %<XrelValidateExportedGlobalVariable(block, "Output", 0, "failure_detector_Y.sensor1_failure")>
        %<XrelValidateExportedGlobalVariable(block, "Output", 1, "failure_detector_Y.sensor2_failure")>
        %<XrelValidateExportedGlobalVariable(block, "Output", 2, "failure_detector_Y.coherency_failure")>
        %closefile DeclareBuffer
        %<LibSetSourceFileSection(currentSrcFile, "Declarations", DeclareBuffer)>
        %% Read block inputs into global IO variable
        %openfile InputIOBuffer_failure_detector_R2024b_sfcn
        %<XrelAssignInputVariableSignal(block, 0, "failure_detector_U.sensor1_reading")>
        %<XrelAssignInputVariableSignal(block, 1, "failure_detector_U.sensor2_reading")>
        %closefile InputIOBuffer_failure_detector_R2024b_sfcn
        %<InputIOBuffer_failure_detector_R2024b_sfcn>
        %% 
        failure_detector_step();
        %% Write global IO variables to block outputs
        %openfile OutputIOBuffer_failure_detector_R2024b_sfcn
        %<XrelAssignOutputVariableSignal(block, 0, "failure_detector_Y.sensor1_failure")>
        %<XrelAssignOutputVariableSignal(block, 1, "failure_detector_Y.sensor2_failure")>
        %<XrelAssignOutputVariableSignal(block, 2, "failure_detector_Y.coherency_failure")>
        %closefile OutputIOBuffer_failure_detector_R2024b_sfcn
        %<OutputIOBuffer_failure_detector_R2024b_sfcn>
    %endif
%endfunction

%% Function: Terminate ====================================================
%function Terminate (block, system) Output
    %if IsModelReferenceSimTarget()
        %% This TLC file does not inline the call to the legacy code for the model reference SIM target.
        %% It can be used to generate stub behavior in a SIM target build used to support diagram update in model block SIL/PIL.
        %return
    %endif
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        {
            %assign sfunInstanceName = FEVAL("matlab.lang.makeValidName", LibBlockIdentifier(block))
            failure_detector_R2024b_sfcn_wrapper_Terminate_%<sfunInstanceName>();
        
        }
    %else
        %% 
        failure_detector_terminate();
    %endif
%endfunction

%% [EOF]
